@using Nop.Plugin.Misc.Nexport.Domain.Enums
@using Nop.Plugin.Misc.Nexport.Models.ProductMappings
@using Nop.Services.Helpers
@inject IDateTimeHelper dateTimeHelper

@model Nop.Plugin.Misc.Nexport.Models.ProductMappings.NexportProductMappingListSearchModel

@{
    var tableColumns = new List<ColumnProperty>
    {
        new ColumnProperty(nameof(NexportProductMappingModel.Id))
        {
            Width = "50",
            IsMasterCheckBox = true,
            Render = new RenderCustom("deleteMappingCheckBox")
        },
        new ColumnProperty(nameof(NexportProductMappingModel.StoreName))
        {
            Title = "Store",
            Width = "150",
            Render = new RenderCustom("renderStoreName")
        },
        new ColumnProperty(nameof(NexportProductMappingModel.NexportProductName))
        {
            Title = "Nexport Product Name",
            Width = "150"
        },
        new ColumnProperty(nameof(NexportProductMappingModel.Id))
        {
            Title = "Nexport Product Details",
            Width = "550",
            Render = new RenderCustom("renderNexportProductDetails")
        },
        new ColumnProperty(nameof(NexportProductMappingModel.Id))
        {
            Title = "Subscription Information",
            Width = "250",
            Render = new RenderCustom("renderSubscriptionInformation")
        },
        new ColumnProperty(nameof(NexportProductMappingModel.UtcLastModifiedDate))
        {
            Title = "Last Modified Date",
            Width = "150",
            Render = new RenderCustom("renderLocalDateForTableEntry")
        },
        new ColumnProperty(nameof(NexportProductMappingModel.Id))
        {
            Width = "100",
            Render = new RenderCustom("renderViewMappingDetails"),
            ClassName = NopColumnClassDefaults.Button,
            AutoWidth = false
        },
        new ColumnProperty(nameof(NexportProductMappingModel.Id))
        {
            Width = "100",
            Render = new RenderCustom("renderModifyProductMapping"),
            ClassName = NopColumnClassDefaults.Button,
            AutoWidth = false
        }
    };
}
<div class="clearfix">
    <div class="pull-right">
        <button type="button" id="delete-selected-mappings" class="btn bg-red">
            <i class="fa fa-trash-o"></i>
            @T("Admin.Common.Delete.Selected")
        </button>
        <nop-action-confirmation asp-button-id="delete-selected-mappings" />
    </div>
</div>
<nop-alert asp-alert-id="deleteSelectedMappingsFailed" />

@await Html.PartialAsync("Table", new NexportDataTablesModel
{
    Name = "product-mappings-grid",
    UrlRead = new DataUrl("GetProductMappings", "NexportIntegration",
                    new RouteValueDictionary {
                        { "nexportProductId", Model.NexportProductId },
                        { "nexportProductType", Model.NexportProductType },
                        { "nopProductId", Model.NopProductId }
                    }),
    UrlDelete = new DataUrl("DeleteMapping", "NexportIntegration", null),
    UrlUpdate = new DataUrl("EditMapping", "NexportIntegration", null),
    Length = Model.PageSize,
    LengthMenu = Model.AvailablePageSizes,
    ColumnCollection = tableColumns
})

<span style="color: red;">* Default mapping cannot be removed once it has been mapped. However, it can be modified to a different product.</span>

<input type="submit" id="btnRefreshMappings" style="display: none">

<script>
    var hasDefaultMapping = false;

    function renderStoreName(data, type, row, meta) {
        if (data === null) {
            return "Default";
        }

        return data;
    }

    function deleteMappingCheckBox(data, type, row, meta) {
        if (meta.row === 0)
            return "";

        return (data === true)
            ? '<input name="checkbox_delete_product_mappings" value="' + row.Id + '" type="checkbox" class="checkboxGroups" checked="checked" />'
            : '<input name="checkbox_delete_product_mappings" value="' + row.Id + '" type="checkbox" class="checkboxGroups" />';
    }

    function renderNexportProductDetails(data, type, row, meta) {
        if (data > 0) {
            var displayText = "";
            if (row.NexportCatalogId !== "00000000-0000-0000-0000-000000000000") {
                displayText += "<b>Type: </b>";
                if (row.Type === +"@((int)NexportProductTypeEnum.Catalog)") {
                    displayText += "Catalog";
                } else if (row.Type === +"@((int)NexportProductTypeEnum.Section)") {
                    displayText += "Section";
                } else if (row.Type === +"@((int)NexportProductTypeEnum.TrainingPlan)") {
                    displayText += "Training Plain";
                }

                displayText += "<br>" + "<b>Nexport Catalog Id: </b>" + row.NexportCatalogId;

                if (row.NexportSyllabusId || row.NexportSyllabus !== "00000000-0000-0000-0000-000000000000") {
                    displayText += "<br>" + "<b>Nexport Syllabus Id: </b>" + row.NexportSyllabusId;
                }

                displayText += "<br>" + "<b>Nexport Product Id: </b>" + row.NexportCatalogSyllabusLinkId;

                if (row.UtcLastSynchronizationDate) {
                    displayText += "<br>" + "<b>Last Synchronized Date: </b>" + renderLocalDateForTableEntry(row.UtcLastSynchronizationDate, null, null, null);
                }
            }

            return displayText;
        }

        return "";
    }

    function renderSubscriptionInformation(data, type, row, meta) {
        if (data > 0) {
            var displayText = "";

            var subOrgName = row.NexportSubscriptionOrgName;
            var subOrgDisplayText = subOrgName;

            if (subOrgName) {
                subOrgDisplayText += " - " + row.NexportSubscriptionOrgShortName;
                displayText += "<b>Subscription Organization: </b>" + subOrgDisplayText;
            }

            var groupMembershipNames = "";
            var groupMemberships = row.GroupMembershipMappingModels;

            if (groupMemberships) {
                if (groupMemberships.length > 0) {
                    groupMembershipNames += "<br>" + "<b>Group Memberships: </b>";
                    for (var i = 0; i < groupMemberships.length; i++) {
                        groupMembershipNames += groupMemberships[i].NexportGroupName + " (" + 
                            groupMemberships[i].NexportGroupShortName + ")";
                        if (i < groupMemberships.length - 1) {
                            groupMembershipNames += ", ";
                        }
                    }

                    displayText += groupMembershipNames;
                }
            }
            
            return displayText;
        }

        return "";
    }

    function renderViewMappingDetails(data, type, row, meta) {
        var url;

        var renderCreateMapping = row.NexportCatalogId === "00000000-0000-0000-0000-000000000000";
        var buttonName;
        var nopProductIdAvailable = @Json.Serialize(Model.NopProductId.HasValue);

        if (nopProductIdAvailable) {
            buttonName = "Create/edit mapping";
        } else {
            buttonName = "View/edit mapping details";
        }

        if (renderCreateMapping) {
            url = "@Url.Action("MapNexportProductPopup", "NexportIntegration")";
            url += "?nopProductId=@Model.NopProductId";
            var storeId = row.StoreId;
            if (storeId) {
                url += "&storeId=" + storeId;
            }
            url += "&containerId=product-mapping-container";
        } else {
            url = "@Url.Action("ProductMappingDetailsPopup", "NexportIntegration")" + "?mappingId=" + row.Id + "&containerId=";

            var renderInProductPage = @Json.Serialize(Model.NopProductId.HasValue);

            if (renderInProductPage) {
                url += "product-mapping-container";
            } else {
                if (row.Type === 0) {
                    url += "nexport-catalog-panels";
                } else if (row.Type === 1) {
                    url += "nexport-section-panels";
                } else {
                    url += "nexport-training-plan-panels";
                }
            }
        }

        url += "&btnId=btnRefreshMappings";

        var buttonFunction = "javascript:OpenWindow('" + url + "', 800, 800, true); return false;";

        if (renderCreateMapping && row.StoreId && !hasDefaultMapping) {
            return renderCustomButton(buttonFunction, "fa fa-info", buttonName, true);
        }

        return renderCustomButton(buttonFunction, "fa fa-info", buttonName);;
    }

    function renderModifyProductMapping(data, type, row, meta) {
        var url = "@Url.Action("MapNexportProductPopup", "NexportIntegration")";
        url += "?nopProductId=@Model.NopProductId";
        var storeId = row.StoreId;
        if (storeId) {
            url += "&storeId=" + storeId;
        }
        url += "&updateProduct=true&containerId=product-mapping-container&btnId=btnRefreshMappings";

        var buttonFunction = "javascript:OpenWindow('" + url + "', 800, 800, true); return false;";

        if (+data < 1) {
            return renderCustomButton(buttonFunction, "fa fa-pencil", "Modify product mapping", true);
        }

        return renderCustomButton(buttonFunction, "fa fa-pencil", "Modify product mapping");
    }

    function renderCustomButton(buttonFunction, buttonIconClass, buttonName, renderDisabled) {
        if (!buttonIconClass) {
            throw "Button icon class is missing!";
        }

        if (!buttonName) {
            throw "Cannot render button without a name!";
        }

        var buttonElement = "<button class=\"btn btn-default\" onclick=\"" + buttonFunction + "\"";

        if (renderDisabled) {
            buttonElement += " disabled";
        }

        buttonElement += "><i class=\"" + buttonIconClass + "\"></i>" + buttonName + "</button>";

        return buttonElement;
    }

    function renderLocalDateForTableEntry(data, type, row, meta) {
        return data ? moment.utc(data).local().format("MM/DD/YYYY HH:mm:ss") : null;
    }

    $(document).ready(function() {
        $("#product-mapping-container").on("xhr.dt",
            "#product-mappings-grid",
            function(e, settings, json, xhr) {
                if (json.Data) {
                    if (json.Data[0].NopProductId !== 0) {
                        hasDefaultMapping = true;
                    } else {
                        hasDefaultMapping = false;
                    }
                }
            });

        $("#delete-selected-mappings-action-confirmation-submit-button").bind("click", function (e) {
            var submitIds = selectedIds;
            submitIds = $.grep(submitIds, function(value) {
                return value !== "0";
            });

            var noDeletion = false;
            if (submitIds.length < 1) {
                noDeletion = true;
            }

            var postData = {
                selectedIds: submitIds
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@Url.Action("DeleteMappings", "NexportIntegration")",
                data: postData,
                error: function (jqXHR, textStatus, errorThrown) {
                    $("#deleteSelectedMappingsFailed-info").text(errorThrown);
                    $("#deleteSelectedMappingsFailed").click();
                },
                complete: function (jqXHR, textStatus) {
                    updateTable("#product-mappings-grid");
                }
            });

            $("#delete-selected-mappings-action-confirmation").modal("toggle");

            if (noDeletion)
                alert("No mapping selected");

            return false;
        });

        $("#btnRefreshMappings").click(function() {
            // Refresh grid
            $("#product-mappings-grid").DataTable().draw(false);

            // Return false to don't reload a page
            return false;
        });
    });

    //# sourceURL=ProductMappingTable.js
</script>